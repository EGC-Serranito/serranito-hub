# Generated by Selenium IDE
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options


class TestExplore:
    def setup_method(self, method):
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        self.driver = webdriver.Chrome(options=chrome_options)
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def test_explore(self):
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(1920, 1015)
        wait = WebDriverWait(self.driver, 10)
        elemento = wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".sidebar-item:nth-child(3) .align-middle:nth-child(2)")))
        elemento.click()
        dropdown = self.driver.find_element(By.ID, "sorting")
        dropdown.find_element(By.XPATH, "//option[. = 'Oldest first']").click()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "sorting")
        dropdown.find_element(By.XPATH, "//option[. = 'Name A-Z']").click()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "sorting")
        dropdown.find_element(By.XPATH, "//option[. = 'Name Z-A']").click()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "sorting")
        dropdown.find_element(By.XPATH, "//option[. = 'Fewest feature models first']").click()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "sorting")
        dropdown.find_element(By.XPATH, "//option[. = 'Most feature models first']").click()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "clear-filters").click()
        dropdown = self.driver.find_element(By.ID, "publication_type")
        dropdown.find_element(By.XPATH, "//option[. = 'None']").click()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "publication_type")
        dropdown.find_element(By.XPATH, "//option[. = 'Book']").click()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "publication_type")
        dropdown.find_element(By.XPATH, "//option[. = 'Data Management Plan']").click()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "sorting")
        dropdown.find_element(By.XPATH, "//option[. = 'Name Z-A']").click()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.CSS_SELECTOR, ".d-flex:nth-child(2)").click()
        dropdown = self.driver.find_element(By.ID, "sorting")
        dropdown.find_element(By.XPATH, "//option[. = 'Name A-Z']").click()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "sorting")
        dropdown.find_element(By.XPATH, "//option[. = 'Oldest first']").click()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "sorting")
        dropdown.find_element(By.XPATH, "//option[. = 'Newest first']").click()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "sorting")
        dropdown.find_element(By.XPATH, "//option[. = 'Most feature models first']").click()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "sorting")
        dropdown.find_element(By.XPATH, "//option[. = 'Oldest first']").click()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "clear-filters").click()
        self.driver.find_element(By.ID, "query").click()
        dropdown = self.driver.find_element(By.ID, "sorting")
        dropdown.find_element(By.XPATH, "//option[. = 'Name A-Z']").click()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "publication_type")
        dropdown.find_element(By.XPATH, "//option[. = 'Book Section']").click()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "publication_type")
        dropdown.find_element(By.XPATH, "//option[. = 'Data Management Plan']").click()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "sorting")
        dropdown.find_element(By.XPATH, "//option[. = 'Oldest first']").click()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "sorting")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        dropdown = self.driver.find_element(By.ID, "publication_type")
        dropdown.find_element(By.XPATH, "//option[. = 'Any']").click()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "publication_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "clear-filters").click()


class TestDarkLightSwitch():
    def setup_method(self, method):
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        self.driver = webdriver.Chrome(options=chrome_options)
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def test_dark_light_switch(self):
        self.driver.get("http://localhost:5000/")
        self.driver.set_window_size(1920, 1080)
        wait = WebDriverWait(self.driver, 10)

        cambiar_tema = wait.until(
            EC.element_to_be_clickable((By.ID, "theme-toggle"))
        )
        cambiar_tema.click()
        cambiar_tema.click()
        cambiar_tema.click()
        cambiar_tema.click()
