name: Deploy to Main

on:
  push:
    tags:
      - '*'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        run: |
          sudo apt-get update && sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        env:
          ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          echo "${ADMIN_TOKEN}" | gh auth login --with-token

      - name: Find or create Pull Request
        id: pr
        run: |
          # Extract the tag name
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          echo "Tag name: $TAG_NAME"

          # Try to find an existing PR from develop to main
          PR_NUMBER=$(gh pr list --head develop --base main --state open --json number --jq '.[0].number')

          if [ -z "$PR_NUMBER" ]; then
            echo "No existing PR found. Creating a new PR."
            PR_NUMBER=$(gh pr create \
              --title "Merge develop branch into main" \
              --body "Pull Request autogenerated from develop." \
              --base main \
              --head develop \
              --repo ${{ github.repository }} \
              --draft=false)
            echo "Created PR #$PR_NUMBER"
          else
            echo "Found existing PR: #$PR_NUMBER"
          fi

          # Set the PR number as output to use in other steps
          echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_OUTPUT

      - name: Merge Pull Request
        run: |
          PR_NUMBER=${{ steps.pr.outputs.PR_NUMBER }}
          if [ -n "$PR_NUMBER" ]; then
            echo "Merging Pull Request #$PR_NUMBER"
            gh pr merge $PR_NUMBER --merge --admin
          else
            echo "No open Pull Request found from develop to main."
          fi

      - name: Generate release notes
        id: releasenotes
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "$TAG_NAME^" || echo "")

          echo "Generating release notes for tag: $TAG_NAME"
          echo "Previous tag: $PREVIOUS_TAG"

          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log "$TAG_NAME" --no-merges --pretty=format:"%s (%h)" | grep -v '^Revert ')
            COMMIT_HISTORY_LINK="https://github.com/${{ github.repository }}/commits/${TAG_NAME}"
          else
            COMMITS=$(git log "$PREVIOUS_TAG..$TAG_NAME" --no-merges --pretty=format:"%s (%h)" | grep -v '^Revert ')
            COMMIT_HISTORY_LINK="https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${TAG_NAME}"
          fi

          FEATURES=""
          TESTS=""
          CI=""
          OTHER=""

          while IFS= read -r line; do
            TYPE=$(echo "$line" | grep -oE "^(feat|ci|test|.*?):" | sed 's/://')
            DESC=$(echo "$line" | sed -E "s/^$TYPE: (.+) \((.+)\)$/\1/")
            HASH=$(echo "$line" | sed -E "s/^$TYPE: .+ \((.+)\)$/\1/")
              LINK="https://github.com/${{ github.repository }}/commit/${HASH}"

              case "$TYPE" in
                feat)
                  FEATURES+="- feat: ${DESC} ([${HASH}](${LINK}))\n"
                  ;;
                test)
                  TESTS+="- test: ${DESC} ([${HASH}](${LINK}))\n"
                  ;;
                ci)
                  CI+="- ci: ${DESC} ([${HASH}](${LINK}))\n"
                  ;;
                *)
                  OTHER+="- ${TYPE}: ${DESC} ([${HASH}](${LINK}))\n"
                  ;;
              esac
          done <<< "$COMMITS"

          RELEASE_NOTES="# Release ${TAG_NAME}\n\n"
          RELEASE_NOTES+="## Features\n${FEATURES:-No new features.}\n"
          RELEASE_NOTES+="## Tests\n${TESTS:-No tests changes.}\n"
          RELEASE_NOTES+="## Continuous integration (CI)\n${CI:-No CI changes.}\n"
          RELEASE_NOTES+="## Other changes\n${OTHER:-No other changes.}\n"
          RELEASE_NOTES+="## Full commit history\n\nFor a complete list of commits included in this release, please visit the [commit history](${COMMIT_HISTORY_LINK})."

          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo -e "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          gh release create "$TAG_NAME" \
            --title "${TAG_NAME}" \
            --notes "${{ steps.releasenotes.outputs.RELEASE_NOTES }}" \
            --target main
